# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my_flash_cards.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import flash_cards_resource
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QAction, QDialog, QTabWidget, \
    QVBoxLayout, QDialogButtonBox, QLabel, QPlainTextEdit, QGroupBox, QHBoxLayout, \
        QPlainTextEdit, QLabel, QListWidget, QPushButton, QComboBox
from PyQt5.QtGui import QIcon


class TabWidget(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle('Flash Cards')
        self.setWindowIcon(QIcon(':/images/images/idle.ico'))

        tab_widget = QTabWidget()
        tab_widget.addTab(TestTab(), "Test")
        tab_widget.addTab(NewCardTab(), "New Card")

        vbox = QVBoxLayout()
        vbox.addWidget(tab_widget)
        self.setLayout(vbox)
        self.setFixedSize(640, 480)

class QuestionGroupBox(QGroupBox):
    def __init__(self):
        super().__init__()

        question_label = QLabel()
        question_label.setText("Question")
        question_textbox = QPlainTextEdit()

        hbox = QHBoxLayout()
        hbox.addWidget(question_label)
        hbox.addWidget(question_textbox)
        self.setLayout(hbox)


class AnswerGroupBox(QGroupBox):
    def __init__(self):
        super().__init__()
        answer_label = QLabel()
        answer_label.setText("Answer  ")
        answer_textbox = QPlainTextEdit()

        hbox = QHBoxLayout()
        hbox.addWidget(answer_label)
        hbox.addWidget(answer_textbox)
        self.setLayout(hbox)
class QAGroupBox(QGroupBox):
    def __init__(self, title: str):
        super().__init__()
        self.setTitle(title)

        question_groupbox = QuestionGroupBox()
        answer_groupbox = AnswerGroupBox()

        vbox = QVBoxLayout()
        vbox.addWidget(question_groupbox)
        vbox.addWidget(answer_groupbox)
        self.setLayout(vbox)
        self.setFixedSize(320, 420)

class ListWidget(QListWidget):
    def __init__(self):
        super().__init__()

class Button(QPushButton):
    def __init__(self):
        super().__init__()


class combodemo(QWidget):
    def __init__(self, parent=None):
        super(combodemo, self).__init__(parent)

        layout = QHBoxLayout()
        self.cb = QComboBox()
        self.cb.addItem("Select Subject")
        self.cb.addItem("C")
        self.cb.addItem("C++")
        self.cb.addItems(["Java", "C#", "Python", "Add New ..."])
        self.cb.currentIndexChanged.connect(self.selectionchange)

        layout.addWidget(self.cb)
        self.setLayout(layout)
        self.setWindowTitle("combo box demo")
        self.cb.activated.connect(
            self.trigger_add_new_subject)

    def trigger_add_new_subject(self):
        if self.cb.currentText() == 'Add New ...':
            print("hello")
            #TODO Open new dialog window


    def selectionchange(self, i):
        print("Items in the list are :")

        for count in range(self.cb.count()):
            print(self.cb.itemText(count))
        print("Current index", i, "selection changed ", self.cb.currentText())

class SourceGroupBox(QGroupBox):
    def __init__(self, title: str):
        super().__init__()
        self.setTitle(title)

        subject_combo = combodemo()
        hbox = QHBoxLayout()
        hbox.addWidget(subject_combo)

        self.setLayout(hbox)

class NewCardTab(QWidget):
    def __init__(self):
        super().__init__()

        # Add GroupBox: QA & Source
        hbox = QHBoxLayout()
        qa_groupbox = QAGroupBox("Question and Answer")
        source_groupbox = SourceGroupBox("Source")
        hbox.addWidget(qa_groupbox)
        hbox.addWidget(source_groupbox)
        self.setLayout(hbox)


class TestTab(QWidget):
    def __init__(self):
        super().__init__()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    tab_widget = TabWidget()
    tab_widget.show()
    # x = ''
    # demo = MainWindow(x)
    # demo.show()

    app.exec_()
